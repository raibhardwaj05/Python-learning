# -*- coding: utf-8 -*-
"""Python Experiments.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZKrDnlMVkpJtG2YS9nRhcNL-YBkY3c5A
"""

#1st experiment: data types , control statements
student_name = "ABC XYZ"
print("Student Name:", student_name)
print("Uppercase:", student_name.upper())
print("Lowercase:", student_name.lower())
print("First Name:", student_name.split()[0])

print("-" * 40)
subjects = ["Math", "Science", "English","marathi"]
subjects.append("Computer")
print("Subjects:", subjects)
print("First 5 subjects:", subjects[:5])

-----------------------------------------------------------------------------------------

import array
marks = array.array('i', [85, 90, 88, 92])
marks.append(95)
print("Marks (Array):", marks.tolist())

-----------------------------------------------------------------------------------------

import array
marks1 = array.array('i', [82, 91, 89, 93, 98])
student_info = {
    "name": "Smruti",
    "roll_no": 101,
    "branch": "CSE",
    "marks": marks1.tolist()
}
print("Student Info Dictionary:")
for key, value in student_info.items():
    print(f"{key} â†’ {value}")

-----------------------------------------------------------------------------------------

hobbies = {"reading", "music", "coding", "reading", "cooking"}
hobbies.add("painting")
print("Hobbies (Set):", hobbies)

sports_hobbies = {"cycling", "music", "painting"}
print("Common hobbies:", hobbies.intersection(sports_hobbies))
print("All hobbies:", hobbies.union(sports_hobbies))

-----------------------------------------------------------------------------------------

permanent_details = ("19-05-1995", "B+")
dob, blood = permanent_details
print("Date of Birth:", dob)
print("Blood Group:", blood)

-----------------------------------------------------------------------------------------

name = input("Enter student name: ")
roll_no = input("Enter roll number: ")
date = input("Enter date (DD-MM-YYYY): ")
status = input("Enter attendance status (Present/Absent): ")
print("\nðŸ“„ Attendance Record")
print("---------------------------")
print(f"Name        : {name}")
print(f"Roll Number : {roll_no}")
print(f"Date        : {date}",sep="-")
print(f"Status      : {status}")

-----------------------------------------------------------------------------------------

name = input("Enter student name: ")
roll_no = input("Enter roll number: ")

subject1 = int(input("Enter marks for Math: "))
subject2 = int(input("Enter marks for Science: "))
subject3 = int(input("Enter marks for English: "))

total = subject1 + subject2 + subject3
average = total / 3

if average >= 90:
    grade = 'A+'
elif average >= 75:
    grade = 'A'
elif average >= 60:
    grade = 'B'
elif average >= 45:
    grade = 'C'
else:
    grade = 'F'

print("\nðŸ“˜ Student Marksheet")
print("-----------------------------")
print(f"Name        : {name}")
print(f"Roll Number : {roll_no}")
print(f"Math        : {subject1}")
print(f"Science     : {subject2}")
print(f"English     : {subject3}")
print(f"Total Marks : {total}/300")
print(f"Average     : {average:.2f}")
print(f"Grade       : {grade}")

-----------------------------------------------------------------------------------------

library = {}

book_id = input("Enter Book ID: ")
title = input("Enter Book Title: ")
author = input("Enter Author Name: ")
year = input("Enter Year of Publication: ")
available = input("Is the book available? (Yes/No): ")

library[book_id] = {
    "Title": title,
    "Author": author,
    "Year": year,
    "Available": available
}

print("\nðŸ“š Book Entry Saved:")
print("-----------------------")
print(f"Book ID    : {book_id}")
print(f"Title      : {library[book_id]['Title']}")
print(f"Author     : {library[book_id]['Author']}")
print(f"Year       : {library[book_id]['Year']}")
print(f"Available  : {library[book_id]['Available']}")
-------------------------------------------------------------------------------------------------------------------------------------------------
#2nd Assignment Class Object Inheritance Polymorphism exception handling
class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def show_info(self):
        print(f"Name: {self.name}, Age: {self.age}")
student1 = Student("ABc", 20)
student2 = Student("PQr", 20)
student1.show_info()
student2.show_info()

-----------------------------------------------------------------------------------------

class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def display_info(self):
        print(f"Book: {self.title} by {self.author}")

book1 = Book("Wings of Fire", "A.P.J. Abdul Kalam")
book1.display_info()

-----------------------------------------------------------------------------------------

class BankAccount:
    def __init__(self, holder, balance=0):
        self.holder = holder
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"â‚¹{amount} deposited. Balance: â‚¹{self.balance}")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds.")
        else:
            self.balance -= amount
            print(f"â‚¹{amount} withdrawn. Balance: â‚¹{self.balance}")

account = BankAccount("Abc", 1000)
account.deposit(500)
account.withdraw(300)
account.withdraw(1500)

-----------------------------------------------------------------------------------------

class Parent:
    def display(self):
        print("This is the Parent class")

class Child(Parent):
    def show(self):
        print("This is the Child class")


d = Child()
d.display()
d.show()

-----------------------------------------------------------------------------------------

class Animal:`
    def speak(self):
        print("Animal speaks")

class Dog(Animal):
    def bark(self):
        print("Dog barks")

d = Dog()
d.speak()
d.bark()

-----------------------------------------------------------------------------------------

class Grandparent:
    def home(self):
        print("Grandparent's house")

class Parent(Grandparent):
    def car(self):
        print("Parent's car")

class Child(Parent):
    def bike(self):
        print("Child's bike")

c = Child()
c.home()
c.car()
c.bike()

-----------------------------------------------------------------------------------------

class Mother:
    def care(self):
        print("Mother's care")

class Father:
    def protect(self):
        print("Father's protection")

class Child(Mother, Father):
    def play(self):
        print("Child plays")

c = Child()
c.care()
c.protect()
c.play()

-----------------------------------------------------------------------------------------

class Vehicle:
    def __init__(self, brand):
        self.brand = brand

    def start(self):
        print(f"{self.brand} vehicle starts")

class Car(Vehicle):
    def drive(self):
        print(f"{self.brand} car is driving")

c = Car("Toyota")
c.start()
c.drive()

-----------------------------------------------------------------------------------------

try:
    a = 10
    b = 0
    result = a / b
except ZeroDivisionError:
    print("Cannot divide by zero!")

try:
    num = int(input("Enter a number: "))
    result = 10 / num
except ValueError:
    print("Please enter a valid number!")
except ZeroDivisionError:
    print("Number cannot be zero!")
------------------------------------------------------------------------------------------------------------------------------------------------
#DS-stack queue
stack = []
stack.append(15)
stack.append(23)
stack.append(31)
stack.append(45)
stack.append(99)
print("Stack:", stack)
print("Popped:", stack.pop())
print("Top element:", stack[-1])
print("Is empty?", len(stack) == 0)
print("Size:", len(stack))

from collections import deque

stack = deque()

stack.append('P')
stack.append('Q')
stack.append('R')

print("Top element:", stack[-1])
print("Popped:", stack.pop())
print("Stack:", stack)

-----------------------------------------------------------------------------------------

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node

    def insert_after_value(self, target, data):
        temp = self.head
        while temp and temp.data != target:
            temp = temp.next
        if temp is None:
            print(f"Node with value {target} not found.")
            return
        new_node = Node(data)
        new_node.next = temp.next
        temp.next = new_node

    def insert_at_position(self, pos, data):
        if pos == 0:
            self.insert_at_beginning(data)
            return
        new_node = Node(data)
        temp = self.head
        count = 0
        while temp and count < pos - 1:
            temp = temp.next
            count += 1
        if temp is None:
            print("Position out of range")
            return
        new_node.next = temp.next
        temp.next = new_node

    def display(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")
ll = LinkedList()
ll.insert_at_end(25)
ll.insert_at_end(13)
ll.insert_at_end(84)
ll.insert_at_beginning(54)
ll.insert_after_value(84, 45)
ll.insert_at_position(3, 45)
print("Final Linked List:")
ll.display()
-----------------------------------------------------------------------------------------------------------------------------------------------
#File Handling
filename = "example.txt"
with open(filename, "a") as f:
    f.write("\nThis is newly appended line.")

# Now read entire file
with open(filename, "r") as f:
    content = f.read()

print("File contents after append:\n")
print(content)

-----------------------------------------------------------------------------------------

filename = "example.txt"
new_line = input("Enter text to append: ")
with open(filename, "a") as f:
    f.write("\n" + new_line)

with open(filename, "r") as f:
    print("\nFile contents after append:\n")
    print(f.read())

-----------------------------------------------------------------------------------------

filename = "example.txt"
lines = 0
words = 0
characters = 0
with open(filename, "r") as f:
    for line in f:
        lines += 1
        words += len(line.split())
        characters += len(line)

print("Lines:", lines)
print("Words:", words)
print("Characters:", characters)

-----------------------------------------------------------------------------------------

import os
files = os.listdir(".")
print("Files in current directory:")
for f in files:
    print(f)
-----------------------------------------------------------------------------------------------------------------------------------------
#GUI
import tkinter as tk
# Create main window
root = tk.Tk()
root.title("My First GUI")
root.geometry("300x250")

# ---- Widgets ----
# Label + Entry (Text Field)
tk.Label(root, text="Enter your name:").pack(pady=5)
name_entry = tk.Entry(root, width=25)
name_entry.pack()

# Radio Buttons (Gender)
tk.Label(root, text="Select Gender:").pack(pady=5)
gender = tk.StringVar(value="Male")
tk.Radiobutton(root, text="Male", variable=gender, value="Male").pack()
tk.Radiobutton(root, text="Female", variable=gender, value="Female").pack()

# Check Button (Agreement)
agree = tk.BooleanVar()
tk.Checkbutton(root, text="I agree to terms", variable=agree).pack(pady=5)

# Function for button click
def submit():
    name = name_entry.get()
    g = gender.get()
    status = "Agreed" if agree.get() else "Not Agreed"
    result_label.config(text=f"Name: {name}\nGender: {g}\nStatus: {status}")

# Submit Button
tk.Button(root, text="Submit", command=submit).pack(pady=5)

# Result Label
result_label = tk.Label(root, text="", fg="blue")
result_label.pack()
root.mainloop()
------------------------------------------------------------------------------------------------------------------------------------------------
#CRUD Operation
import sqlite3

# Connect to database (creates if not exists)
conn = sqlite3.connect("students.db")
cursor = conn.cursor()

# Create table
cursor.execute("""
CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    age INTEGER
)
""")

# CREATE
def insert_student(name, age):
    cursor.execute("INSERT INTO students (name, age) VALUES (?, ?)", (name, age))
    conn.commit()

# READ
def get_students():
    cursor.execute("SELECT * FROM students")
    return cursor.fetchall()

# UPDATE
def update_student(student_id, new_name, new_age):
    cursor.execute("UPDATE students SET name=?, age=? WHERE id=?", (new_name, new_age, student_id))
    conn.commit()

# DELETE
def delete_student(student_id):
    cursor.execute("DELETE FROM students WHERE id=?", (student_id,))
    conn.commit()

# ---- DEMO ----
insert_student("Smruti", 25)
insert_student("Amit", 22)

print("All Students:", get_students())

update_student(1, "Smruti Vyavahare", 26)
print("After Update:", get_students())

delete_student(2)
print("After Delete:", get_students())

conn.close()
--------------------------------------------------------------------------------------------------------------------------------------------
#Threading
import threading
def print_numbers():
    for i in range(1, 6):
        print(f"Number: {i}")
def print_letters():
    for ch in ['A', 'B', 'C', 'D', 'E']:
        print(f"Letter: {ch}")
# Create threads
t1 = threading.Thread(target=print_numbers)
t2 = threading.Thread(target=print_letters)
# Start threads
t1.start()
t2.start()
print("Both threads finished execution.")
------------------------------------------------------------------------------------------------------------------------------------------------
#Socket Programming
import socket
import threading
# ---------- Server Code ----------
def server_program():
    host = socket.gethostname()
    port = 5000
    server_socket = socket.socket()
    server_socket.bind((host, port))
    server_socket.listen(1)
    print("Server is waiting for connection...")
    conn, address = server_socket.accept()
    print("Connection from:", address)
    while True:
        data = conn.recv(1024).decode()
        if not data:
            break
        print("From client:", data)
        conn.send(f"Server received: {data}".encode())
    conn.close()
# ---------- Client Code ----------
def client_program():
    host = socket.gethostname()
    port = 5000
    client_socket = socket.socket()
    client_socket.connect((host, port))
    for msg in ["Hello Server", "How are you?", "bye"]:
        client_socket.send(msg.encode())
        data = client_socket.recv(1024).decode()
        print("From server:", data)
    client_socket.close()
# ---------- Run server in background thread ----------
server_thread = threading.Thread(target=server_program, daemon=True)
server_thread.start()
# ---------- Run client ----------
client_program()
--------------------------------------------------------------------------------------------------------------------------------------
#8. numpy
import numpy as np
# 1D array
arr1 = np.array([1, 2, 3, 4, 5])
print("1D array:", arr1)
# 2D array
arr2 = np.array([[1, 2, 3], [4, 5, 6]])
print("2D array:\n", arr2)# Array with zeros or ones
zeros = np.zeros((2,3))
ones = np.ones((3,2))
# Array with range
range_arr = np.arange(0, 10, 2)  # start, stop, step
print("Range array:", range_arr)
# Random array
rand_arr = np.random.rand(2,3)
print(rand_arr)# 2x3 random floats between 0 and 1

a = np.array([1,2,3])
b = np.array([4,5,6])

# Arithmetic
print(a + b)   # [5 7 9]
print(a * b)   # [4 10 18]
print(a - b)   # [-3 -3 -3]
print(a / b)   # [0.25 0.4 0.5]
# Universal functions
print(np.sqrt(a))  # [1. 1.414 1.732]
print(np.exp(a))   # [2.718, 7.389, 20.085]

arr = np.array([[1,2,3],[4,5,6]])

# Shape and reshape
print(arr.shape)       # (2,3)
reshaped = arr.reshape(3,2)
print("Reshaped:\n", reshaped)

# Transpose
print("Transpose:\n", arr.T)

# Indexing & slicing
print(arr[0,1])      # 2
print(arr[:,2])      # [3 6]

# Stack arrays
vstacked = np.vstack((arr, arr))
print(vstacked)
hstacked = np.hstack((arr, arr))
print(hstacked)
--------------------------------------------------------------------------------------------------------------------------------------------
#pandas
import pandas as pd

# Series from list
s = pd.Series([10, 20, 30, 40])
print(s)

# Series with custom index
s2 = pd.Series([100, 200, 300], index=['a','b','c'])
print(s2)

# Operations
print(s2 * 2)
print(s2 + 50)

# Create DataFrame from dictionary
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'Alice'],
    'Age': [25, 30, 35, 25],
    'Salary': [50000, 60000, 70000, 50000]
}

df = pd.DataFrame(data)
print(df)

# Access columns
print(df['Name'])
print(df[['Name','Salary']])

# Filter rows
print(df[df['Age'] > 25])

# Group by Name and calculate mean salary
grouped = df.groupby('Name')['Salary'].mean()
print(grouped)

# Group by multiple columns
grouped_multi = df.groupby(['Name','Age'])['Salary'].sum()
print(grouped_multi)
-------------------------------------------------------------------------------------------------------------------------------------
#numpy&pandas
import numpy as np
import pandas as pd

# -----------------------------
# Step 1: Create data using NumPy
# -----------------------------
# Employee IDs
emp_id = np.arange(101, 111)  # 101 to 110

# Departments
departments = np.array(['HR', 'IT', 'Finance', 'IT', 'HR', 'Finance', 'IT', 'HR', 'Finance', 'IT'])

# Ages (randomly generated between 25 and 40)
ages = np.random.randint(25, 41, size=10)

# Salaries (randomly generated between 40000 and 90000)
salaries = np.random.randint(40000, 90001, size=10)

# -----------------------------
# Step 2: Create Pandas DataFrame
# -----------------------------
df = pd.DataFrame({
    'EmployeeID': emp_id,
    'Department': departments,
    'Age': ages,
    'Salary': salaries
})

print("Initial Employee Data:\n", df)

# -----------------------------
# Step 3: Perform basic operations
# -----------------------------
# Average salary
avg_salary = df['Salary'].mean()
print("\nAverage Salary:", avg_salary)

# Add a new column using NumPy operation: Salary after 10% increment
df['SalaryAfterIncrement'] = df['Salary'] * 1.10
print("\nData with Salary After Increment:\n", df)

# Filter employees from IT department with salary > 60000
it_high_salary = df[(df['Department'] == 'IT') & (df['Salary'] > 60000)]
print("\nIT Employees with Salary > 60000:\n", it_high_salary)

# -----------------------------
# Step 4: Grouping using groupby()
# -----------------------------
# Average salary by Department
dept_avg_salary = df.groupby('Department')['Salary'].mean()
print("\nAverage Salary by Department:\n", dept_avg_salary)

# Count of employees in each Department
dept_count = df.groupby('Department')['EmployeeID'].count()
print("\nNumber of Employees by Department:\n", dept_count)

# Maximum Salary in each Department
dept_max_salary = df.groupby('Department')['Salary'].max()
print("\nMaximum Salary by Department:\n", dept_max_salary)
----------------------------------------------------------------------------------------------------------------------------------------------------
#Email read & Sent
import smtplib
from email.mime.text import MIMEText

body = "This is my first text mail. This is sent to you from my python program."
msg = MIMEText(body)

fromaddr = "smrutivyavahare@gmail.com"
toaddr = "smrutiv@sies.edu.in"

msg['From'] = fromaddr
msg['To'] = toaddr
msg['Subject'] = "Hello Friends"

server = smtplib.SMTP("smtp.gmail.com", 587)
server.ehlo()
server.starttls()
server.ehlo()

server.login(fromaddr, "wnyo ssty tkqk fezm")

server.sendmail(fromaddr, toaddr, msg.as_string())
print("Mail sent successfully!")

server.quit()

-----------------------------------------------------------------------------------------