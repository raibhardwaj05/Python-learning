# -*- coding: utf-8 -*-
"""College_experiments.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18bN8-TnGt-ot-w1L8pi9JkCmYPcaUhPt
"""

studentName = "Bhardwaj Rai"
print(studentName)
print(studentName.upper())
print(studentName.lower())
print(studentName.split()[0])

# list
import array
# "i" = integer, "f" = float, "d" = double, "b" = char ===>>> specifies the datatypoe of the array elements
marks= array.array("i", [30, 40, 50, 60])
marks.append(100)
marks_list = marks.tolist()
print(marks_list)

marks_str = ", ".join(str(x) for x in marks_list)
print(marks_str)

-----------------------------------------------------------------------------------------

# dictionaries
student_info = {
    "name": "Bhardwaj",
    "age": 20,
    "marks": marks_str
}
print(student_info["name"])

for key, value in student_info.items():
    print(f"{key} -> {value}")

-----------------------------------------------------------------------------------------

# sets
cse_subjects = {"maths", "dbms"}
cse_subjects.add("COA")
print(cse_subjects)

cse = ", ".join(str(x) for x in cse_subjects)
print(cse)

aids_subjects = {"OS", "DSGT", "COA"}
print(aids_subjects)

aids = ", ".join(str(x) for x in aids_subjects)
print(aids)

# union and intersection
common = cse_subjects.intersection(aids_subjects)
print(f"common: {", ".join(str(x) for x in common)}")

all_subjects = cse_subjects.union(aids_subjects)
print(f"All: {", ".join(str(x) for x in all_subjects)}")

-----------------------------------------------------------------------------------------

# Tuple ==>> that are permanent
my_details = ("05/07/2006", "O+")
dob, blood_grp = my_details
print(dob)
print(blood_grp)

-----------------------------------------------------------------------------------------

# dictionary input
library = {}

for i in range(0,2):
    bookid = int(input("Book ID: "))
    title = input("Title: ")

    library[bookid] ={
        "Title": title
    }

for bookid, details in library.items():
    print(f"{bookid} ==>> {details['Title']}")

-----------------------------------------------------------------------------------------

class Parent:
    def __init__(self):
        print("This is Parent")
    def parentName(self, name):
        print("Parent:", name)

class Child(Parent):
    def __init__(self, name):
        super().__init__()
        self.name = name
        print("Child is born")

    def childName(self):
        print(f"Child: {self.name}")

child = Child("abc")
print("-"*40)

child.parentName("xyz")
child.childName()

-----------------------------------------------------------------------------------------

# file handling

# create file
with open("sample.txt", "w") as f:
    f.write("\n"+ "Hello Bhardwaj Rai")

# read file
with open("sample.txt", "r") as f:
    text = f.read()

print(text)

# append data in the file
with open("sample.txt", "a") as f:
    f.write("\n"+ "Hacking")

# find lines words and characters in the file
lines = 0
words = 0
characters = 0

with open("sample.txt") as f:
    for line in f:
        lines += 1
        words += len(line.split())
        characters += len(line)
print(lines)
print(words)
print(characters)

-----------------------------------------------------------------------------------------

# list the dirtectories in the previous directory = (..)
import os

files = os.listdir("..")
for file in files:
    print(file)

-----------------------------------------------------------------------------------------

# exception handling
try:
    a = int(input("a: "))
    b = int(input("b: "))
    c = a / b
except ValueError:
    print("invalid input")
except ZeroDivisionError:
    print("b cannot be negative")
else:
    print(f"Result: {c}")

-----------------------------------------------------------------------------------------

# Threading
import threading
import time

def print_numbers():
    for i in range(0, 6):
        print(i)
        time.sleep(1)

def print_alpha():
    for ch in ["a", "b", "c", "d", "e", "f"]:
        print(ch)
        time.sleep(1)


t1 = threading.Thread(target= print_numbers)
t2 = threading.Thread(target= print_alpha)

t1.start()
t2.start()

t1.join()
t2.join()
print("Both threadscompleted")

-----------------------------------------------------------------------------------------

# SQLite
import sqlite3

conn = sqlite3.connect("Students.db")
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS students(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER
    )
""")

# create
def insert_student(name, age):
    cursor.execute("INSERT INTO students (name, age) VALUES (?, ?)", (name, age))
    conn.commit()

# read
def get_students():
    cursor.execute("SELECT * FROM students")
    return cursor.fetchall()

# update
def update_student(STDid, name, age):
    cursor.execute("UPDATE students SET name = ?, age = ? WHERE id = ?", (name, age, STDid))
    conn.commit()

# delete
def delete_student(STDid):
    cursor.execute("DELETE FROM students WHERE id = ?", (STDid,))
    conn.commit()

insert_student("XYZ", 20)
insert_student("abc", 18)
insert_student("esp", 25)

print("Students\n",  get_students())

update_student(2, "ABC", 21)
print("Students\n",  get_students())

delete_student(3)
print("Students\n",  get_students())

conn.close()

-----------------------------------------------------------------------------------------

# stack data structures
stack = []

stack.append(1)
stack.append(2)
stack.append(3)
stack.append(4)

print(f"stack: {stack}")
print(f"stack top: {stack[-1]}")
print(f"Popped: {stack.pop()}")
print(f"Is empty: {len(stack) == 0}")

# from collections import deque

stack.append("Z")
stack.append("A")

print(f"stack: {stack}")
print(f"stack top: {stack[-1]}")
print(f"Popped: {stack.pop()}")
print(f"Is empty: {len(stack) == 0}")

-----------------------------------------------------------------------------------------

# linked list
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Linked_List:
    def __init__(self):
        self.head = None

    def insert_beginning(self, data):
        newnode = Node(data)
        newnode.next = self.head
        self.head = newnode

    def insert_end(self, data):
        newnode = Node(data)

        if self.head is None:
            self.head = newnode
            return

        temp = self.head
        while temp.next:
            temp = temp.next

        temp.next = newnode

    def insert_value(self, target, data):
        temp = self.head
        while temp and temp.data != target:
            temp = temp.next

        if temp is None:
            print("Value not found")
            return

        newnode = Node(data)
        newnode.next = temp.next
        temp.next = newnode

    def insert_pos(self, pos, data):
        if pos == 0:
            self.insert_beginning(data)
            return

        temp = self.head
        count = 0
        while temp and count < pos - 1:
            temp = temp.next

        if temp is None:
            print("Invalid position")
            return

        newnode = Node(data)
        newnode.next = temp.next
        temp.next = newnode

    def display(self):
        if self.head is None:
            print("Empty")
            return

        temp = self.head
        while temp:
            print(temp.data, end = " -> ")
            temp = temp.next

        print("None")

ll = Linked_List()
ll.insert_beginning(5)
ll.insert_end(25)
ll.insert_value(25, 50)
ll.insert_pos(1, 60)
ll.display()

-----------------------------------------------------------------------------------------

# GUI
import tkinter as tk

r = tk.Tk()
r.title("GUI")
r.geometry("500x500")
r.configure(bg = "grey")

tk.Label(r, text = "Enter Name", bg = "grey").pack(pady = 10)
name = tk.Entry(r, width = 25)
name.pack()

tk.Label(r, text = "Select Gender", bg = "grey").pack(pady = 10)
gender = tk.StringVar(value = "Male")
tk.Radiobutton(r, text = "Male", variable = gender, value = "Male", bg = "grey").pack(pady = 2)
tk.Radiobutton(r, text = "Female", variable = gender, value = "Female", bg = "grey").pack(pady = 2)

agree = tk.BooleanVar()
tk.Checkbutton(r, text = "I agree to all terms", variable = agree, bg = "grey").pack(pady = 10)

# label to display submit result
result = tk.Label(r, text = "", bg= "grey", fg = "yellow")
result.pack(pady = 10)

# function for button
def submit_button():
    naam = name.get()
    g = gender.get()
    status = "Agreed" if agree.get() else "Not Agreed"
    result.config(text = f"Name: {naam}\nGender: {g}\nStatus: {status}")

tk.Button(text = "Submit", command = submit_button).pack(pady = 10)

r.mainloop()

-----------------------------------------------------------------------------------------

import smtplib
from email.mime.text import MIMEText

body = "This code is to send emails to my friends"
msg = MIMEText(body)

fromaddr = "bhardwajsheojeerai@gmail.com"
toaddr = "sachinrai00066@gmail.com"

msg["From"] = fromaddr
msg["To"] = toaddr
msg["Subject"] = "Hello Friends"

server = smtplib.SMTP("smtp.gmail.com", 587)
server.ehlo()
server.starttls()
server.ehlo()

server.login(fromaddr, "grfj zztv kiif fmag")

server.sendmail(fromaddr, toaddr, msg.as_string())

server.quit()

print("Mail sent")

-----------------------------------------------------------------------------------------

import numpy as np

arr1 = np.array([1, 2, 3, 4])
print(f"1D: {arr1}\n")

zero = np.zeros((2,3))
print(zero, "\n")

one = np.ones((3, 2))
print(one, "\n")

arange_arr = np.arange(0, 10, 2)
print(f"Arange: {arange_arr}")

arr2 = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
print(arr2.shape)

reshape = arr2.reshape(4,2)
print(reshape)

print(arr2.T)

-----------------------------------------------------------------------------------------

import pandas as pd

series1 = pd.Series([0, 1, 2, 3])
print(series1)

series = pd.Series([0, 2, 3, 45], index = ['a', 'b', 'c', 'd'])
print(series)

print(series1 *2)

emp = {
    "name": ["Bhardwaj", "xyz", "abc"],
    "age": [25, 30, 45]
}

df = pd.DataFrame(emp)
print(df)

print(df["name"])

print(df[df["age"] > 25])

grouped = df.groupby("name")["age"].mean()
print(grouped)

-----------------------------------------------------------------------------------------